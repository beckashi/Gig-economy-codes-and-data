# 7-26task2
# -*- coding: utf-8 -*-
"""task1-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10FZ4DA62IqR8f4eUogLOJyA-YToB_ndh
"""

# -*- coding: utf-8 -*-
"""code714-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F2FX6TAxRjVKjgH29GHEWunOBGdgC3FX
"""

import csv
import sys
import datetime
import json
import ast
import os
from os import listdir
import os.path
from os import listdir
from os.path import isfile, join
import os
from distutils.dir_util import copy_tree
from shutil import copytree, copy2
import random
import json
import operator
import os
import http.client
import time
import gzip
from io import BytesIO
import json
from threading import Thread
import threading
from time import sleep
import http.client
import gzip
from io import BytesIO
import json
import random

conn = ''
headersDynamic = []
import _thread
import datetime
from multiprocessing import Process, Lock, Manager, Value
import collections
from difflib import SequenceMatcher
import _thread
import itertools
from itertools import islice
import multiprocessing
import gc
from io import StringIO
from multiprocessing import Pool
import glob
from os import listdir
from os.path import isfile, join

import shutil, os
import re


def get_column(row, service):
    if service == 'Circ':
        # if is_mod_file == True:  # mod
        #     scooterIdIndex = row.index('idScooter')
        #     batteryIndex = row.index('PowerPercentInt')
        #     latitudeIndex = row.index('location_latitude')
        #     longitudeIndex = row.index('location_longitude')
        #
        # else:
        scooterIdIndex = row.index('id')  # no mod
        batteryIndex = row.index('battery_level')
        latitudeIndex = row.index('location_latitude')
        longitudeIndex = row.index('location_longitude')


    elif service == 'Bird':
        scooterIdIndex = row.index('id')
        batteryIndex = row.index('battery_level')
        latitudeIndex = row.index('location_latitude')
        longitudeIndex = row.index('location_longitude')
    elif service == 'Jump':
        scooterIdIndex = row.index('0_assetId')
        batteryIndex = row.index('0_vehicle_battery_low')
        latitudeIndex = row.index('0_location_latitude')
        longitudeIndex = row.index('0_location_longitude')
    elif service == 'Lime':
        scooterIdIndex = row.index('id')
        batteryIndex = row.index('attributes_battery_level')
        latitudeIndex = row.index('attributes_latitude')
        longitudeIndex = row.index('attributes_longitude')
    elif service == 'LyftScooter':
        scooterIdIndex = row.index('rideable_name')
        batteryIndex = row.index('battery_status_percent')
        latitudeIndex = row.index('location_lat')
        longitudeIndex = row.index('location_lng')
    elif service == 'Movo':
        scooterIdIndex = row.index('id')
        batteryIndex = row.index('battery_percentage')
        latitudeIndex = row.index('latitude')
        longitudeIndex = row.index('longitude')
    elif service == 'Scoot':
        scooterIdIndex = row.index('id')
        batteryIndex = row.index('batt_pct_smoothed')
        latitudeIndex = row.index('latitude')
        longitudeIndex = row.index('longitude')
    elif service == 'Skip':
        scooterIdIndex = row.index('ID')
        batteryIndex = row.index('rideablePercentage')
        latitudeIndex = row.index('location_lat')
        longitudeIndex = row.index('location_lon')
    elif service == 'Spin':
        scooterIdIndex = row.index('last4')  # no id
        batteryIndex = row.index('batt_percentage')
        latitudeIndex = row.index('lat')
        longitudeIndex = row.index('lng')
    elif service == 'Tier':
        scooterIdIndex = row.index('id')
        batteryIndex = row.index('batteryLevel')
        latitudeIndex = row.index('lat')
        longitudeIndex = row.index('lng')

    elif service == 'Voi':

        scooterIdIndex = row.index('id')
        batteryIndex = row.index('battery')
        latitudeIndex = row.index('location_0')
        longitudeIndex = row.index('location_1')


    elif service == 'Wind':
        scooterIdIndex = row.index('boardId')
        batteryIndex = row.index('isInOperatingHours')  # no battery
        latitudeIndex = row.index('latitude')
        longitudeIndex = row.index('longitude')
    return scooterIdIndex, batteryIndex, latitudeIndex, longitudeIndex


# services = ['Bird', 'Circ', 'Jump', 'Lime', 'LyftScooter', 'Movo', 'Scoot', 'Skip', 'Spin', 'Tier', 'Voi', 'Wind']
citys = ['DC', 'Detroit', 'Lisbon', 'Madrid', 'MexicoCity', 'Paris', 'SanFrancisco', 'TelAviv', 'Zurich' ]
# city='Zurich'
# service = 'Tier2019-10-30'
dpath = 'E:/P1'

#full_path = os.path.realpath(__file__)
#dpath, realfilename = os.path.split(full_path)
#city='Detroit'

for city in citys:

    dataFilesPath = dpath + '/' + city
    onlyfiles = [f for f in listdir(dataFilesPath) if isfile(join(dataFilesPath, f))]

    service_city_date2num_of_scotter_in_use = {}
    service_city_date2all_scotter = {}
    for file in onlyfiles:
        try:
            date = re.findall("\d{4}-\d{2}-\d{2}", file)[0]
            service = re.findall("\D{4}", file)[0]
        except IndexError:
            date = re.findall("\d{4}-\d{2}", file)[0]
            service = re.findall("\D{4}", file)[0]
        txtFile = dataFilesPath + '/'+file
        date2num_of_scotter_in_use = {}

        if '.txt' in txtFile and 'lock' not in txtFile:
            f = open(txtFile, 'r',encoding='utf-8', errors='ignore')#encoding='utf-8', errors='ignore'

            dataDictionary = f.read()
            f.close()
            print('Reading File: ', txtFile)
            #reader = csv.reader(StringIO(dataDictionary))

            dataDictionary = json.loads(dataDictionary)
            scooterIDS = list(dataDictionary.keys())

            for id in scooterIDS:
                # lastLocations = -1
                # timeStamps = list(dataDictionary[id].keys())
                # timeStamps.sort()

                for epoch in dataDictionary[id]:
                    Latitude = dataDictionary[id][epoch][1]
                    Longitude = dataDictionary[id][epoch][2]
                    Timestamp = dataDictionary[id][epoch][0]
                    Battery = dataDictionary[id][epoch][3]

            print(len(scooterIDS))

            # skipFirst = 0
            # timeIndex = -1
            # scooterIdIndex = -1
            # batteryIndex = -1
            # latitudeIndex = -1
            # longitudeIndex = -1
            # currentTime = 0
            # read each rown in the CSV
            # csvData = {}
            # index_error = False
            # for row in reader:
            #     # read the index of MS column and other required columns
            #     if skipFirst == 0:
            #         # print(txtFile)
            #         if 'MS' not in row:
            #             index_error = True
            #             break
            #         timeIndex = row.index('MS')
            #         skipFirst += 1
            #
            #         # name of the following columns may be different for each service
            #         try:
            #             scooterIdIndex, batteryIndex, latitudeIndex, longitudeIndex = get_column(row, service
            #                                                                                      )
            #         except:
            #             index_error = True
            #             break
            #
            #
            #     else:
            #         # we know the indexes, now read each line
            #         # if it's part pf new time
            #         if row[timeIndex] != '':
            #             currentTime = row[timeIndex]
            #         currentID = row[scooterIdIndex]
            #         # if current ID was never observed before, add it to the CSN dictionary
            #         if currentID not in csvData.keys():
            #             csvData[currentID] = {}
            #         # add the time and location information of currentID
            #         csvData[currentID][currentTime] = {}
            #         csvData[currentID][currentTime]['location'] = (row[latitudeIndex], row[longitudeIndex])
            #         csvData[currentID][currentTime]['Battery'] = row[batteryIndex]

            # if index_error == True:
            #     print("column error!!")
            #     print("actual column nameï¼š", row)
            #     continue

    #         pk = service + "-" + date
    #         if pk not in service_city_date2all_scotter.keys():
    #             service_city_date2all_scotter[pk] = len(dataDictionary.keys())
    #         else:
    #             service_city_date2all_scotter[pk] += len(dataDictionary.keys())
    #
    #         # for scooter_id in dataDictionary.keys():
    #         #     time_slot = set()
    #         #     for scooter_time in dataDictionary[scooter_id].keys():
    #         #         if city == 'DC' or 'San Francisco' or 'Mexico City':
    #         #             city_tz = 'America/Detroit'
    #         #         elif city == 'Chicago' or 'Detroit':
    #         #             city_tz = 'America/' + city
    #         #         elif city == 'Tel Aviv':
    #         #             city_tz = 'Asia/' + city
    #         #         else:
    #         #             city_tz = 'Europe/' + city
    #         #         tz = pytz.timezone(city_tz)
    #         #         dt = datetime.fromtimestamp(int(scooter_time) // 1000, tz)
    #         #         if dt.hour not in time_slot:
    #         #             time_slot.add(dt.hour)
    #         #             date2num_of_scotter_in_use[dt.hour] = date2num_of_scotter_in_use.get(dt.hour, 0) + 1
    #
    #         for i in range(24):
    #             if i not in date2num_of_scotter_in_use.keys():
    #                 date2num_of_scotter_in_use[i] = 0
    #
    #         print(date2num_of_scotter_in_use)
    #
    #         if pk not in service_city_date2num_of_scotter_in_use.keys():
    #             service_city_date2num_of_scotter_in_use[pk] = date2num_of_scotter_in_use
    #         else:
    #
    #             for hour, num in date2num_of_scotter_in_use.items():
    #                 service_city_date2num_of_scotter_in_use[pk][hour] += num
    # print("-------------")
    # print(service_city_date2num_of_scotter_in_use)
    # print(service_city_date2all_scotter)




